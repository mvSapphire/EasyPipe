//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/maksym.vorchakov/Work/Documents/Projects/Personal/PowerPipe/src/PowerPipe.Visualization/Antlr/PipelineParser.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419
#pragma warning disable CS3021

namespace PowerPipe.Visualization.Antlr {

using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IPipelineParserListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class PipelineParserBaseListener : IPipelineParserListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="PipelineParser.start"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStart([NotNull] PipelineParser.StartContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="PipelineParser.start"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStart([NotNull] PipelineParser.StartContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="PipelineParser.step"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStep([NotNull] PipelineParser.StepContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="PipelineParser.step"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStep([NotNull] PipelineParser.StepContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="PipelineParser.addStep"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAddStep([NotNull] PipelineParser.AddStepContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="PipelineParser.addStep"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAddStep([NotNull] PipelineParser.AddStepContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="PipelineParser.addIfStep"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAddIfStep([NotNull] PipelineParser.AddIfStepContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="PipelineParser.addIfStep"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAddIfStep([NotNull] PipelineParser.AddIfStepContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="PipelineParser.addIfElseStep"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAddIfElseStep([NotNull] PipelineParser.AddIfElseStepContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="PipelineParser.addIfElseStep"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAddIfElseStep([NotNull] PipelineParser.AddIfElseStepContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="PipelineParser.ifStep"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIfStep([NotNull] PipelineParser.IfStepContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="PipelineParser.ifStep"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIfStep([NotNull] PipelineParser.IfStepContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="PipelineParser.parallelStep"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParallelStep([NotNull] PipelineParser.ParallelStepContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="PipelineParser.parallelStep"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParallelStep([NotNull] PipelineParser.ParallelStepContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
} // namespace PowerPipe.Visualization.Antlr
