//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/maksym.vorchakov/Work/Documents/Projects/Personal/PowerPipe/src/PowerPipe.Visualization/Antlr/PipelineParser.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419
#pragma warning disable CS3021

namespace PowerPipe.Visualization.Antlr {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class PipelineParser : Parser {
	public const int
		ONERRORRETRY=1, ONERRORSUPPRESS=2, COMPENSATE=3, LEFTARROW=4, RIGHTARROW=5, 
		EMPTYPAR=6, COMA=7, DOT=8, WS=9, NEWBUIDLER=10, LAMBDANAME=11, LAMBDA=12, 
		ADD=13, ADDIF=14, ADDIFELSE=15, PARALLEL=16, IF=17, PREDICATE=18, OPENPREDICATE=19, 
		DATA=20, DATA2=21, STEPWITHGENERIC=22, STEPWITHOUTGENERIC=23, TWOSTEPSWITHGENERIC=24, 
		TWOSTEPSWITHOUTGENERIC=25, ANYTEXT=26, OPENPAR=27, CLOSEPAR=28;
	public const int
		RULE_start = 0, RULE_step = 1, RULE_addStep = 2, RULE_addIfStep = 3, RULE_addIfElseStep = 4, 
		RULE_ifStep = 5, RULE_parallelStep = 6;
	public static readonly string[] ruleNames = {
		"start", "step", "addStep", "addIfStep", "addIfElseStep", "ifStep", "parallelStep"
	};

	private static readonly string[] _LiteralNames = {
		null, "'.OnError(PipelineStepErrorHandling.Retry)'", "'.OnError(PipelineStepErrorHandling.Suppress)'", 
		null, "'<'", "'>'", "'()'", "','", "'.'", null, null, null, null, "'Add'", 
		"'AddIf'", "'AddIfElse'", "'Parallel'", "'If'", null, null, null, null, 
		null, null, null, null, null, "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ONERRORRETRY", "ONERRORSUPPRESS", "COMPENSATE", "LEFTARROW", "RIGHTARROW", 
		"EMPTYPAR", "COMA", "DOT", "WS", "NEWBUIDLER", "LAMBDANAME", "LAMBDA", 
		"ADD", "ADDIF", "ADDIFELSE", "PARALLEL", "IF", "PREDICATE", "OPENPREDICATE", 
		"DATA", "DATA2", "STEPWITHGENERIC", "STEPWITHOUTGENERIC", "TWOSTEPSWITHGENERIC", 
		"TWOSTEPSWITHOUTGENERIC", "ANYTEXT", "OPENPAR", "CLOSEPAR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "PipelineParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public PipelineParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class StartContext : ParserRuleContext {
		public StepContext[] step() {
			return GetRuleContexts<StepContext>();
		}
		public StepContext step(int i) {
			return GetRuleContext<StepContext>(i);
		}
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPipelineParserListener typedListener = listener as IPipelineParserListener;
			if (typedListener != null) typedListener.EnterStart(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPipelineParserListener typedListener = listener as IPipelineParserListener;
			if (typedListener != null) typedListener.ExitStart(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPipelineParserVisitor<TResult> typedVisitor = visitor as IPipelineParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_start);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 15;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 14; step();
				}
				}
				State = 17;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ADDIF) | (1L << ADDIFELSE) | (1L << PARALLEL) | (1L << IF))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StepContext : ParserRuleContext {
		public AddStepContext addStep() {
			return GetRuleContext<AddStepContext>(0);
		}
		public AddIfStepContext addIfStep() {
			return GetRuleContext<AddIfStepContext>(0);
		}
		public AddIfElseStepContext addIfElseStep() {
			return GetRuleContext<AddIfElseStepContext>(0);
		}
		public IfStepContext ifStep() {
			return GetRuleContext<IfStepContext>(0);
		}
		public ParallelStepContext parallelStep() {
			return GetRuleContext<ParallelStepContext>(0);
		}
		public StepContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_step; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPipelineParserListener typedListener = listener as IPipelineParserListener;
			if (typedListener != null) typedListener.EnterStep(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPipelineParserListener typedListener = listener as IPipelineParserListener;
			if (typedListener != null) typedListener.ExitStep(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPipelineParserVisitor<TResult> typedVisitor = visitor as IPipelineParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStep(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StepContext step() {
		StepContext _localctx = new StepContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_step);
		try {
			State = 24;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ADD:
				EnterOuterAlt(_localctx, 1);
				{
				State = 19; addStep();
				}
				break;
			case ADDIF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 20; addIfStep();
				}
				break;
			case ADDIFELSE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 21; addIfElseStep();
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 4);
				{
				State = 22; ifStep();
				}
				break;
			case PARALLEL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 23; parallelStep();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddStepContext : ParserRuleContext {
		public ITerminalNode ADD() { return GetToken(PipelineParser.ADD, 0); }
		public ITerminalNode DATA() { return GetToken(PipelineParser.DATA, 0); }
		public AddStepContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addStep; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPipelineParserListener typedListener = listener as IPipelineParserListener;
			if (typedListener != null) typedListener.EnterAddStep(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPipelineParserListener typedListener = listener as IPipelineParserListener;
			if (typedListener != null) typedListener.ExitAddStep(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPipelineParserVisitor<TResult> typedVisitor = visitor as IPipelineParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddStep(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddStepContext addStep() {
		AddStepContext _localctx = new AddStepContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_addStep);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 26; Match(ADD);
			State = 27; Match(DATA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddIfStepContext : ParserRuleContext {
		public ITerminalNode ADDIF() { return GetToken(PipelineParser.ADDIF, 0); }
		public ITerminalNode DATA() { return GetToken(PipelineParser.DATA, 0); }
		public ITerminalNode PREDICATE() { return GetToken(PipelineParser.PREDICATE, 0); }
		public AddIfStepContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addIfStep; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPipelineParserListener typedListener = listener as IPipelineParserListener;
			if (typedListener != null) typedListener.EnterAddIfStep(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPipelineParserListener typedListener = listener as IPipelineParserListener;
			if (typedListener != null) typedListener.ExitAddIfStep(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPipelineParserVisitor<TResult> typedVisitor = visitor as IPipelineParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddIfStep(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddIfStepContext addIfStep() {
		AddIfStepContext _localctx = new AddIfStepContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_addIfStep);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 29; Match(ADDIF);
			State = 30; Match(DATA);
			State = 31; Match(PREDICATE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddIfElseStepContext : ParserRuleContext {
		public ITerminalNode ADDIFELSE() { return GetToken(PipelineParser.ADDIFELSE, 0); }
		public ITerminalNode DATA2() { return GetToken(PipelineParser.DATA2, 0); }
		public ITerminalNode PREDICATE() { return GetToken(PipelineParser.PREDICATE, 0); }
		public AddIfElseStepContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addIfElseStep; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPipelineParserListener typedListener = listener as IPipelineParserListener;
			if (typedListener != null) typedListener.EnterAddIfElseStep(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPipelineParserListener typedListener = listener as IPipelineParserListener;
			if (typedListener != null) typedListener.ExitAddIfElseStep(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPipelineParserVisitor<TResult> typedVisitor = visitor as IPipelineParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddIfElseStep(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddIfElseStepContext addIfElseStep() {
		AddIfElseStepContext _localctx = new AddIfElseStepContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_addIfElseStep);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 33; Match(ADDIFELSE);
			State = 34; Match(DATA2);
			State = 35; Match(PREDICATE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStepContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(PipelineParser.IF, 0); }
		public ITerminalNode OPENPREDICATE() { return GetToken(PipelineParser.OPENPREDICATE, 0); }
		public ITerminalNode CLOSEPAR() { return GetToken(PipelineParser.CLOSEPAR, 0); }
		public StepContext[] step() {
			return GetRuleContexts<StepContext>();
		}
		public StepContext step(int i) {
			return GetRuleContext<StepContext>(i);
		}
		public IfStepContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStep; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPipelineParserListener typedListener = listener as IPipelineParserListener;
			if (typedListener != null) typedListener.EnterIfStep(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPipelineParserListener typedListener = listener as IPipelineParserListener;
			if (typedListener != null) typedListener.ExitIfStep(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPipelineParserVisitor<TResult> typedVisitor = visitor as IPipelineParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStep(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStepContext ifStep() {
		IfStepContext _localctx = new IfStepContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_ifStep);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 37; Match(IF);
			State = 38; Match(OPENPREDICATE);
			State = 40;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 39; step();
				}
				}
				State = 42;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ADDIF) | (1L << ADDIFELSE) | (1L << PARALLEL) | (1L << IF))) != 0) );
			State = 44; Match(CLOSEPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParallelStepContext : ParserRuleContext {
		public ITerminalNode PARALLEL() { return GetToken(PipelineParser.PARALLEL, 0); }
		public ITerminalNode OPENPAR() { return GetToken(PipelineParser.OPENPAR, 0); }
		public ITerminalNode CLOSEPAR() { return GetToken(PipelineParser.CLOSEPAR, 0); }
		public StepContext[] step() {
			return GetRuleContexts<StepContext>();
		}
		public StepContext step(int i) {
			return GetRuleContext<StepContext>(i);
		}
		public ParallelStepContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parallelStep; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPipelineParserListener typedListener = listener as IPipelineParserListener;
			if (typedListener != null) typedListener.EnterParallelStep(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPipelineParserListener typedListener = listener as IPipelineParserListener;
			if (typedListener != null) typedListener.ExitParallelStep(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPipelineParserVisitor<TResult> typedVisitor = visitor as IPipelineParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParallelStep(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParallelStepContext parallelStep() {
		ParallelStepContext _localctx = new ParallelStepContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_parallelStep);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 46; Match(PARALLEL);
			State = 47; Match(OPENPAR);
			State = 49;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 48; step();
				}
				}
				State = 51;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ADDIF) | (1L << ADDIFELSE) | (1L << PARALLEL) | (1L << IF))) != 0) );
			State = 53; Match(CLOSEPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x1E:\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x3\x2\x6"+
		"\x2\x12\n\x2\r\x2\xE\x2\x13\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3\x1B\n"+
		"\x3\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6"+
		"\x3\a\x3\a\x3\a\x6\a+\n\a\r\a\xE\a,\x3\a\x3\a\x3\b\x3\b\x3\b\x6\b\x34"+
		"\n\b\r\b\xE\b\x35\x3\b\x3\b\x3\b\x2\x2\x2\t\x2\x2\x4\x2\x6\x2\b\x2\n\x2"+
		"\f\x2\xE\x2\x2\x2\x39\x2\x11\x3\x2\x2\x2\x4\x1A\x3\x2\x2\x2\x6\x1C\x3"+
		"\x2\x2\x2\b\x1F\x3\x2\x2\x2\n#\x3\x2\x2\x2\f\'\x3\x2\x2\x2\xE\x30\x3\x2"+
		"\x2\x2\x10\x12\x5\x4\x3\x2\x11\x10\x3\x2\x2\x2\x12\x13\x3\x2\x2\x2\x13"+
		"\x11\x3\x2\x2\x2\x13\x14\x3\x2\x2\x2\x14\x3\x3\x2\x2\x2\x15\x1B\x5\x6"+
		"\x4\x2\x16\x1B\x5\b\x5\x2\x17\x1B\x5\n\x6\x2\x18\x1B\x5\f\a\x2\x19\x1B"+
		"\x5\xE\b\x2\x1A\x15\x3\x2\x2\x2\x1A\x16\x3\x2\x2\x2\x1A\x17\x3\x2\x2\x2"+
		"\x1A\x18\x3\x2\x2\x2\x1A\x19\x3\x2\x2\x2\x1B\x5\x3\x2\x2\x2\x1C\x1D\a"+
		"\xF\x2\x2\x1D\x1E\a\x16\x2\x2\x1E\a\x3\x2\x2\x2\x1F \a\x10\x2\x2 !\a\x16"+
		"\x2\x2!\"\a\x14\x2\x2\"\t\x3\x2\x2\x2#$\a\x11\x2\x2$%\a\x17\x2\x2%&\a"+
		"\x14\x2\x2&\v\x3\x2\x2\x2\'(\a\x13\x2\x2(*\a\x15\x2\x2)+\x5\x4\x3\x2*"+
		")\x3\x2\x2\x2+,\x3\x2\x2\x2,*\x3\x2\x2\x2,-\x3\x2\x2\x2-.\x3\x2\x2\x2"+
		"./\a\x1E\x2\x2/\r\x3\x2\x2\x2\x30\x31\a\x12\x2\x2\x31\x33\a\x1D\x2\x2"+
		"\x32\x34\x5\x4\x3\x2\x33\x32\x3\x2\x2\x2\x34\x35\x3\x2\x2\x2\x35\x33\x3"+
		"\x2\x2\x2\x35\x36\x3\x2\x2\x2\x36\x37\x3\x2\x2\x2\x37\x38\a\x1E\x2\x2"+
		"\x38\xF\x3\x2\x2\x2\x6\x13\x1A,\x35";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace PowerPipe.Visualization.Antlr
